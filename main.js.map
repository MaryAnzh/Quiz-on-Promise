{"version":3,"file":"main.js","mappings":"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","sources":["webpack://free-task/./src/service/localStorage.ts","webpack://free-task/./src/model/todo-item/todo-item.ts","webpack://free-task/./src/model/todo-list/todo-list.ts","webpack://free-task/./src/data/lists-data.ts","webpack://free-task/./src/index.ts"],"sourcesContent":["import { IItemData } from '../data/data-item-intarface';\r\nimport { ILocalStorgeKey } from '../data/localstorge-key-interface';\r\n\r\nclass LocalStorageService {\r\n    public keys: string[] = ['toDo', 'Done'];\r\n\r\n    constructor() { }\r\n\r\n    setData(key: string, value: IItemData[]): void {\r\n        if (value) {\r\n            localStorage.setItem(\r\n                key, JSON.stringify(value)\r\n            );\r\n        } else {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    getData(key: string): IItemData[] | null {\r\n        const data = localStorage.getItem(key);\r\n        return data\r\n            ? JSON.parse(data) :\r\n            null;\r\n    }\r\n\r\n    getAllKeys(): ILocalStorgeKey[] {\r\n        return this.keys.map(key => {\r\n            const listInfo: ILocalStorgeKey = {\r\n                name: key,\r\n                data: this.getData(key),\r\n            }\r\n            return listInfo;\r\n        });\r\n    }\r\n}\r\n\r\nexport { LocalStorageService }\r\n    ;","import { IItemData } from '../../data/data-item-intarface';\r\n\r\nclass TodoItem {\r\n    public item: HTMLLIElement;\r\n    public itemData: IItemData;\r\n    public updatePerent: Function;\r\n\r\n    constructor(data: IItemData, updatePerentList: Function) {\r\n        this.item = document.createElement('li');\r\n        this.item.classList.add('list-item');\r\n        this.itemData = data;\r\n        this.item.textContent = this.itemData.content;\r\n        this.item.onclick = this.onClick;\r\n\r\n        this.updatePerent = updatePerentList;\r\n    }\r\n\r\n    onClick = () => {\r\n        this.item.classList.add('out');\r\n        setTimeout(() => {\r\n            this.destroy();\r\n            this.updatePerent(this.itemData);\r\n        }, 850);\r\n    }\r\n\r\n    animationIn(): Promise<Animation> {\r\n        const animation = this.item.animate({\r\n            transform: ['translate(-130%)', 'translateX(-130%)', 'translateX(0%)'],\r\n            height: ['0px', '20px', '20px'],\r\n        },\r\n            {\r\n                // timing options\r\n                duration: 1000,\r\n                easing: 'linear',\r\n            });\r\n\r\n        return animation.finished;\r\n\r\n    }\r\n\r\n    animationOut(): void {\r\n        const animation = this.item.animate({\r\n            transform: ['translate(0%)', 'translateX(-130%)', 'translateX(-130%)'],\r\n            height: ['20px', '20px', '0px'],\r\n        },\r\n            {\r\n                duration: 1000,\r\n                easing: 'linear',\r\n            });\r\n\r\n        animation.finished.then(() => {\r\n            this.destroy();\r\n        });\r\n    }\r\n\r\n    destroy(): void {\r\n        this.item.onclick = null;\r\n        this.item.remove();\r\n    }\r\n}\r\n\r\nexport { TodoItem }","import { LocalStorageService } from '../../service/localStorage';\r\nimport { TodoItem } from '../todo-item/todo-item';\r\nimport { IItemData } from '../../data/data-item-intarface';\r\n\r\nclass TodoList {\r\n    public wrapper: HTMLDivElement;\r\n    public title: HTMLHeadingElement;\r\n    public list: HTMLUListElement;\r\n\r\n    public listName: string;\r\n\r\n    public todoData: IItemData[];\r\n    public updateItemsInMain: Function;\r\n\r\n    public localStorage = new LocalStorageService();\r\n\r\n    constructor(perentNode: HTMLElement, listName: string, updateItemsBind: Function) {\r\n        this.wrapper = document.createElement('div');\r\n        this.wrapper.classList.add('list-wrap');\r\n        this.listName = listName;\r\n        this.title = document.createElement('h3');\r\n        this.title.textContent = listName;\r\n        this.list = document.createElement('ul');\r\n        this.list.classList.add('list-wrap__list');\r\n        this.wrapper.append(this.title, this.list);\r\n        perentNode.append(this.wrapper);\r\n\r\n        this.todoData = this.localStorage.getData(listName);\r\n        this.updateItemsInMain = updateItemsBind;\r\n\r\n        this.createtodoList();\r\n    }\r\n\r\n    createtodoList(): void {\r\n        if (this.todoData) {\r\n            this.todoData.forEach((elData) => {\r\n                const itemComponent = new TodoItem(elData, this.updateListInfoInPerent.bind(this));\r\n                this.list.append(itemComponent.item);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    addItemInList(data: IItemData): void {\r\n        data.perentList = this.listName;\r\n        const itemComponent = new TodoItem(data, this.updateListInfoInPerent);\r\n        this.list.append(itemComponent.item);\r\n        itemComponent.animationIn();\r\n    }\r\n\r\n    updateListInfoInPerent = (itemData: IItemData) => {\r\n        this.updateItemsInMain(itemData);\r\n    }\r\n}\r\n\r\nexport { TodoList }","import { IItemData } from './data-item-intarface';\r\n\r\nconst toDo: IItemData[] = [\r\n    {\r\n        content: 'shopping',\r\n        id: 0,\r\n        perentList: 'toDo',\r\n    },\r\n    {\r\n        content: 'visit to petsvet',\r\n        id: 1,\r\n        perentList: 'toDo',\r\n    },\r\n    {\r\n        content: 'visit to the doctor',\r\n        id: 2,\r\n        perentList: 'toDo',\r\n    },\r\n];\r\n\r\nconst done: IItemData[] = [\r\n    {\r\n        content: 'going to the cinema',\r\n        id: 3,\r\n        perentList: 'Done',\r\n    },\r\n    {\r\n        content: 'something else',\r\n        id: 4,\r\n        perentList: 'Done'\r\n    }\r\n];\r\n\r\nexport { toDo, done };","\"use strict\";\r\n\r\nimport './assets/style/style.scss';\r\nimport { TodoList } from './model/todo-list/todo-list';\r\nimport { toDo, done } from './data/lists-data';\r\nimport { LocalStorageService } from './service/localStorage';\r\nimport { IItemData } from './data/data-item-intarface';\r\nimport { ILocalStorgeKey } from './data/localstorge-key-interface';\r\n\r\nconst addDatatoLocalStorge = () => {\r\n    const localStorge = new LocalStorageService();\r\n    const toDoTitle = 'toDo';\r\n    const doneTitle = 'Done';\r\n    localStorge.setData(toDoTitle, toDo);\r\n    localStorge.setData(doneTitle, done);\r\n}\r\naddDatatoLocalStorge();\r\n\r\nclass PageModel {\r\n    public toDoTitle = 'toDo';\r\n    public doneTitle = 'Done';\r\n    public toDoList: TodoList;\r\n    public doneList: TodoList;\r\n\r\n    public body: HTMLElement;\r\n    public main: HTMLElement;\r\n    public wrapper: HTMLElement;\r\n\r\n    private _localStorge = new LocalStorageService();\r\n\r\n    constructor() {\r\n        this.body = document.querySelector('body');\r\n        this.main = document.createElement('main');\r\n        this.main.classList.add('page');\r\n        this.wrapper = document.createElement('div');\r\n        this.wrapper.classList.add('wrapper');\r\n        this.body.append(this.wrapper);\r\n        this.wrapper.append(this.main);\r\n\r\n        this.toDoList = new TodoList(this.main, this.toDoTitle, this.updateItemsInList);\r\n        this.doneList = new TodoList(this.main, this.doneTitle, this.updateItemsInList);\r\n    }\r\n\r\n    updateItemsInList = (itemData: IItemData) => {\r\n        const currentperentList = itemData.perentList;\r\n        const newPerent = this.changePerent(currentperentList);\r\n        const curretDataList = this._localStorge.getData(currentperentList);\r\n\r\n        const updateDataRemoveItem = curretDataList.filter(el => el.id !== itemData.id);\r\n        this._localStorge.setData(currentperentList, updateDataRemoveItem);\r\n\r\n        itemData.perentList = newPerent;\r\n        const updateDataAddItem = this._localStorge.getData(newPerent);\r\n        updateDataAddItem.push(itemData);\r\n        this._localStorge.setData(newPerent, updateDataAddItem);\r\n\r\n        if (currentperentList == \"toDo\") {\r\n            this.doneList.addItemInList(itemData);\r\n        }\r\n        if (currentperentList === 'Done') {\r\n            this.toDoList.addItemInList(itemData);\r\n        }\r\n    }\r\n\r\n    changePerent(perentList: string): string {\r\n        return perentList === 'toDo' ? 'Done' : 'toDo';\r\n    }\r\n}\r\n\r\nconst page = () => new PageModel();\r\n\r\nwindow.addEventListener('load', page);"],"names":["LocalStorageService","constructor","keys","setData","key","value","localStorage","setItem","JSON","stringify","removeItem","getData","data","getItem","parse","getAllKeys","this","map","name","TodoItem","updatePerentList","onClick","item","classList","add","setTimeout","destroy","updatePerent","itemData","document","createElement","textContent","content","onclick","animationIn","animate","transform","height","duration","easing","finished","animationOut","then","remove","TodoList","perentNode","listName","updateItemsBind","updateListInfoInPerent","updateItemsInMain","wrapper","title","list","append","todoData","createtodoList","forEach","elData","itemComponent","bind","addItemInList","perentList","toDo","id","done","localStorge","addDatatoLocalStorge","PageModel","toDoTitle","doneTitle","_localStorge","updateItemsInList","currentperentList","newPerent","changePerent","updateDataRemoveItem","filter","el","updateDataAddItem","push","doneList","toDoList","body","querySelector","main","window","addEventListener"],"sourceRoot":""}