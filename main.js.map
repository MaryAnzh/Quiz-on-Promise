{"version":3,"file":"main.js","mappings":"mBAAA,MAAMA,EAIFC,YAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,MAA0BD,KAAKD,KAAKG,SAASC,UAAU,SAChE,CAEAC,gBAEI,OADcJ,KAAKC,MAAMI,aAE7B,CAEAC,cAAcC,GACVP,KAAKC,MAAMI,cAAgBE,CAC/B,CAEAC,qBACI,MAAMC,EAAQ,IAAIC,MAAM,SACxBV,KAAKC,MAAMU,cAAcF,EAC7B,EClBJ,MAAMG,EAAN,cACW,KAAAC,SAA+B,KAE/B,KAAAd,KAA+B,KAC/B,KAAAe,QAAsC,KACtC,KAAAC,mBAA6B,CAiExC,CA/DIC,SAgBI,OAAOC,QAAQC,QAfF,qjBAiBjB,CAEAC,eAOI,OANAnB,KAAKD,KAAOqB,SAASC,cAAc,gBACnCrB,KAAKc,QAAUM,SAASE,iBAAiB,qCACzCtB,KAAKa,SAAW,IAAIhB,EAAYG,KAAKD,MAErCC,KAAKc,QAAQS,SAAQC,GAAMA,EAAGC,iBAAiB,SAAUC,GAAM1B,KAAK2B,mBAAmBD,OAEhFT,QAAQC,SACnB,CAEAS,mBAAmBD,GACfA,EAAEE,iBAEF,MAAMC,EAAoBH,EAAEI,OACtBC,EAAOF,EAAKG,QAAQD,KAC1B,IAAIxB,GAASP,KAAKa,SAAST,gBAI3B,GAHI6B,OAAOC,MAAM3B,KACbA,EAAQ,GAERwB,EAAM,CACN,GAAa,SAATA,EAAiB,CACjB,MAAMI,EAAa5B,EAAQ,EACvB4B,EAAa,GACbnC,KAAKa,SAASP,cAAc6B,GAEb,IAAfA,IACAN,EAAKO,UAAUC,IAAI,WACnBrC,KAAKe,mBAAoB,E,CAGjC,GAAa,SAATgB,EAAiB,CACjB,MAAMO,EAAa/B,EAAQ,EAC3BP,KAAKa,SAASP,cAAcgC,GACxBtC,KAAKe,oBACLf,KAAKe,mBAAoB,EACzBf,KAAKc,QAAQS,SAAQC,GAAMA,EAAGY,UAAUG,OAAO,a,EAM3DvC,KAAKa,SAASL,oBAClB,ECjEJ,MAAMgC,EAAqB,ICH3B,oBACS,KAAA3B,SAA+B,KAE/B,KAAA4B,WAA4B,IAAI7B,EAChC,KAAA8B,SAAmC,KACnC,KAAA3C,KAA+B,KAC/B,KAAA4C,YAAuC,KAEvC,KAAAC,UAAgC,IAqCzC,CAnCE5B,SAWE,OAAOC,QAAQC,QAVO,0XAWxB,CAEMC,e,qCAYJ,OAXAnB,KAAK0C,SAA4BtB,SAASC,cAAc,4BACxDrB,KAAK0C,SAASG,gBAAkB7C,KAAKyC,WAAWzB,SAEhDhB,KAAKD,KAAOqB,SAASC,cAAc,gBACnCrB,KAAK2C,YAAcvB,SAASC,cAAc,oCAC1CrB,KAAK4C,UAAYxB,SAASC,cAAc,2CACxCrB,KAAKa,SAAW,IAAIhB,EAAYG,KAAKD,MAErCC,KAAK2C,YAAYlB,iBAAiB,SAAUC,GAAM1B,KAAK8C,iBAAiBpB,WAElE1B,KAAKyC,WAAWtB,eACfF,QAAQC,SACjB,E,+RAEA4B,iBAAiBpB,GACfqB,QAAQC,IAAI,SACZ,MACMzC,EADyBmB,EAAEI,OACdvB,MACnBP,KAAK4C,UAAUK,YAAc1C,CAC/B,GDzBF2C,OAAOzB,iBAAiB,QAdP,KAA2B,O,OAAA,E,OAAA,E,EAAA,YACxC,MAAM0B,EAAO/B,SAASC,cAAc,QAC9B+B,EAAUhC,SAASiC,cAAc,QACvCD,EAAQhB,UAAUC,IAAI,QAEtB,MAAMiB,EAAUlC,SAASiC,cAAc,OACvCC,EAAQlB,UAAUC,IAAI,WACtBc,EAAKI,OAAOD,GACZA,EAAQC,OAAOH,GAEfA,EAAQP,gBAAkBL,EAAKxB,eACzBwB,EAAKrB,cACf,E,YAZ4C,K,6QAY3C,G","sources":["webpack://free-task/./src/services/formService.ts","webpack://free-task/./src/view/components/form/form.component.ts","webpack://free-task/./src/index.ts","webpack://free-task/./src/view/pages/main/main.ts"],"sourcesContent":["class FormService {\r\n    public form: HTMLFormElement;\r\n    public input: HTMLInputElement;\r\n\r\n    constructor(form: HTMLFormElement) {\r\n        this.form = form;\r\n        this.input = <HTMLInputElement>this.form.elements.namedItem('number');\r\n    }\r\n\r\n    getInputValue(): number {\r\n        const value = this.input.valueAsNumber;\r\n        return value;\r\n    }\r\n\r\n    setInputValue(value: number): void {\r\n        this.input.valueAsNumber = value;\r\n    }\r\n\r\n    generateInputEvrnt() {\r\n        const event = new Event('input');\r\n        this.input.dispatchEvent(event);\r\n    }\r\n\r\n}\r\n\r\nexport { FormService };","import { PageRenderer } from '../../../model/page-renderer.model';\r\nimport { FormService } from '../../../services/formService';\r\n\r\nclass FormComponent implements PageRenderer {\r\n    public formServ: null | FormService = null;\r\n\r\n    public form: null | HTMLFormElement = null;\r\n    public buttons: null | NodeListOf<Element> = null;\r\n    public isPrevButtonBlock: boolean = true;\r\n\r\n    render(): Promise<string> {\r\n        const view = `\r\n        <form class=\"number-form\">\r\n          <labe class=\"number-form__title\"l>Введите число</label>\r\n          <dov class=\"number-form__input-block\">\r\n            <button class=\"number-form__input-block__button blocked\" data-type=\"prev\">-</button>\r\n            <input\r\n              name=\"number\"\r\n              type=\"number\"\r\n              class=\"number-form__input-block__field\"\r\n              value=\"0\"\r\n              />\r\n            <button class=\"number-form__input-block__button\" data-type=\"next\">+</button>\r\n          </div>\r\n        </form>\r\n        `;\r\n        return Promise.resolve(view);\r\n\r\n    }\r\n\r\n    after_render(): Promise<void> {\r\n        this.form = document.querySelector('.number-form');\r\n        this.buttons = document.querySelectorAll('.number-form__input-block__button');\r\n        this.formServ = new FormService(this.form);\r\n\r\n        this.buttons.forEach(el => el.addEventListener('click', (e) => this.changeValueOnClick(e)));\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    changeValueOnClick(e: Event): void {\r\n        e.preventDefault();\r\n\r\n        const elem = <HTMLElement>e.target;\r\n        const type = elem.dataset.type;\r\n        let value = +this.formServ.getInputValue();\r\n        if (Number.isNaN(value)) {\r\n            value = 0;\r\n        }\r\n        if (type) {\r\n            if (type === 'prev') {\r\n                const prevNumber = value - 1;\r\n                if (prevNumber > 0) {\r\n                    this.formServ.setInputValue(prevNumber);\r\n                }\r\n                if (prevNumber === 0) {\r\n                    elem.classList.add('blocked');\r\n                    this.isPrevButtonBlock = true;\r\n                }\r\n            }\r\n            if (type === 'next') {\r\n                const nextNumber = value + 1;\r\n                this.formServ.setInputValue(nextNumber);\r\n                if (this.isPrevButtonBlock) {\r\n                    this.isPrevButtonBlock = false;\r\n                    this.buttons.forEach(el => el.classList.remove('blocked'));\r\n                }\r\n\r\n            }\r\n        }\r\n        //наверное костыль, т.к. не срабатывал слушатель при событии\r\n        this.formServ.generateInputEvrnt();\r\n    }\r\n}\r\n\r\nexport { FormComponent }","\"use strict\";\r\n\r\nimport './assets/style/style.scss';\r\n\r\nimport { PageRenderer } from './model/page-renderer.model';\r\nimport { Main } from './view/pages/main/main';\r\n\r\nconst page: PageRenderer = new Main();\r\n\r\nconst viewPage = async (): Promise<void> => {\r\n    const body = document.querySelector('body');\r\n    const content = document.createElement('main');\r\n    content.classList.add('page');\r\n\r\n    const wrapper = document.createElement('div');\r\n    wrapper.classList.add('wrapper');\r\n    body.append(wrapper);\r\n    wrapper.append(content);\r\n\r\n    content.innerHTML = await page.render();\r\n    await page.after_render();\r\n}\r\n\r\nwindow.addEventListener('load', viewPage);","import { PageRenderer } from '../../../model/page-renderer.model';\r\nimport { FormComponent } from '../../components/form/form.component';\r\nimport { FormService } from '../../../services/formService';\r\n\r\nclass Main implements PageRenderer {\r\n  public formServ: FormService | null = null;\r\n\r\n  public numberForm: FormComponent = new FormComponent();\r\n  public formWrap: null | HTMLFormElement = null;\r\n  public form: null | HTMLFormElement = null;\r\n  public numberInput: null | HTMLInputElement = null;\r\n\r\n  public inputView: null | HTMLElement = null;\r\n\r\n  render(): Promise<string> {\r\n    const view =  /*html*/`\r\n    <div class=\"main-wrapper\">\r\n      <h2 class=\"main-wrapper__title\">Free Task</h2>\r\n      <section class=\"main-wrapper__form-view\"></section>\r\n      <section class=\"main-wrapper__form-result\">\r\n        <h4 class=\"main-wrapper__form-result__title\">Вы ввели число:</h4>\r\n        <div class=\"main-wrapper__form-result__result-view\"></div>\r\n      </section>\r\n    </div>\r\n    `;\r\n    return Promise.resolve(view);\r\n  }\r\n\r\n  async after_render(): Promise<void> {\r\n    this.formWrap = <HTMLFormElement>document.querySelector('.main-wrapper__form-view');\r\n    this.formWrap.innerHTML = await this.numberForm.render();\r\n\r\n    this.form = document.querySelector('.number-form');\r\n    this.numberInput = document.querySelector('.number-form__input-block__field');\r\n    this.inputView = document.querySelector('.main-wrapper__form-result__result-view');\r\n    this.formServ = new FormService(this.form);\r\n\r\n    this.numberInput.addEventListener('input', (e) => this.listenInputVslue(e));\r\n\r\n    await this.numberForm.after_render();\r\n    return Promise.resolve();\r\n  }\r\n\r\n  listenInputVslue(e: Event): void {\r\n    console.log('input');\r\n    const elem = <HTMLInputElement>e.target;\r\n    const value = elem.value;\r\n    this.inputView.textContent = value;\r\n  }\r\n}\r\n\r\nexport { Main };"],"names":["FormService","constructor","form","this","input","elements","namedItem","getInputValue","valueAsNumber","setInputValue","value","generateInputEvrnt","event","Event","dispatchEvent","FormComponent","formServ","buttons","isPrevButtonBlock","render","Promise","resolve","after_render","document","querySelector","querySelectorAll","forEach","el","addEventListener","e","changeValueOnClick","preventDefault","elem","target","type","dataset","Number","isNaN","prevNumber","classList","add","nextNumber","remove","page","numberForm","formWrap","numberInput","inputView","innerHTML","listenInputVslue","console","log","textContent","window","body","content","createElement","wrapper","append"],"sourceRoot":""}